{"version":3,"sources":["../../src/models/model.js"],"names":["Model","entity","criteria","params","selection","resolve","reject","query","find","single","all","select","sort","sortKey","sorts","skip","limit","exec","err","data","length","save","update","flags","remove"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;IAEqBA,K;AAEjB,mBAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcA,MAAd;AACH;;AAED;;;;;;;;;;;;+BAQOC,Q,EAAuC;AAAA;;AAAA,gBAA7BC,MAA6B,uEAApB,EAAoB;AAAA,gBAAhBC,SAAgB,uEAAJ,EAAI;;AAC1C,mBAAO,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,QAAQ,MAAKN,MAAL,CAAYO,IAAZ,CAAiBN,QAAjB,CAAZ;AACA,oBAAIO,SAAS,KAAb;;AAEA,oBAAI,CAACN,OAAOO,GAAZ,EAAiB;AACbH,4BAAQA,MAAMI,MAAN,CAAaP,SAAb,CAAR;AACH;;AAED,oBAAID,OAAOS,IAAX,EAAiB;AACbL,4BAAQA,MAAMK,IAAN,qBAAaT,OAAOU,OAAP,IAAkB,IAA/B,EAAsCV,OAAOS,IAA7C,EAAR;AACH;;AAED,oBAAIT,OAAOW,KAAX,EAAkB;AACdP,4BAAQA,MAAMK,IAAN,CAAWT,OAAOW,KAAlB,CAAR;AACH;;AAED,oBAAIX,OAAOY,IAAX,EAAiB;AACbR,4BAAQA,MAAMQ,IAAN,CAAWZ,OAAOY,IAAlB,CAAR;AACH;;AAED,oBAAIZ,OAAOa,KAAX,EAAkB;AACdP,6BAASN,OAAOa,KAAP,KAAiB,CAA1B;AACAT,4BAAQA,MAAMS,KAAN,CAAYb,OAAOa,KAAnB,CAAR;AACH;;AAEDT,sBAAMU,IAAN,CAAW,UAACC,GAAD,EAAMC,IAAN,EAAe;AACtB,wBAAIV,MAAJ,EAAY;AACRU,+BAAOA,KAAKC,MAAL,KAAgB,CAAhB,GAAoBD,KAAK,CAAL,CAApB,GAA8B,IAArC;AACH;AACD,2BAAQD,GAAD,GAAQZ,OAAOY,GAAP,CAAR,GAAsBb,QAAQc,IAAR,CAA7B;AACH,iBALD;AAMH,aAhCM,CAAP;AAiCH;;AAED;;;;;;;;;iCAMoB;AAAA;;AAAA,gBAAbhB,MAAa,uEAAJ,EAAI;;AAChB,mBAAO,uBAAY,UAACE,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIL,SAAS,IAAI,OAAKA,MAAT,CAAgBE,MAAhB,CAAb;AACA,uBAAOF,OAAOoB,IAAP,CAAY,UAACH,GAAD,EAAMC,IAAN,EAAe;AAC9B,2BAAQD,GAAD,GAAQZ,OAAOY,GAAP,CAAR,GAAsBb,QAAQc,IAAR,CAA7B;AACH,iBAFM,CAAP;AAGH,aALM,CAAP;AAMH;;AAED;;;;;;;;;;;+BAQOjB,Q,EAAmC;AAAA;;AAAA,gBAAzBoB,OAAyB,uEAAhB,EAAgB;;AAAA,gBAAZC,KAAY,uEAAJ,EAAI;;AACtC,mBAAO,uBAAY,UAAClB,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAO,OAAKL,MAAL,CAAYqB,MAAZ,CAAmBpB,QAAnB,EAA6BoB,OAA7B,EAAqCC,KAArC,EAA4C,UAACL,GAAD,EAAMC,IAAN,EAAe;AAC9D,2BAAQD,GAAD,GAAQZ,OAAOY,GAAP,CAAR,GAAsBb,QAAQc,IAAR,CAA7B;AACH,iBAFM,CAAP;AAGH,aAJM,CAAP;AAKH;;AAED;;;;;;;;;+BAMOjB,Q,EAAU;AAAA;;AACb,mBAAO,uBAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAO,OAAKL,MAAL,CAAYuB,MAAZ,CAAmBtB,QAAnB,EAA6B,UAACgB,GAAD,EAAS;AACzC,2BAAQA,GAAD,GAAQZ,OAAOY,GAAP,CAAR,GAAsBb,SAA7B;AACH,iBAFM,CAAP;AAGH,aAJM,CAAP;AAKH;;;;;;kBA7FgBL,K","file":"model.js","sourcesContent":["import Promise from 'bluebird';\n\nexport default class Model {\n    \n    constructor(entity) {\n        this.entity = entity;\n    }\n    \n    /**\n     * Select record or records.\n     *\n     * @param {Object} criteria\n     * @param {Object} params\n     * @param {Object} selection\n     * @returns {Promise}\n     */\n    select(criteria, params = {}, selection = {}) {\n        return new Promise((resolve, reject) => {\n\n            let query = this.entity.find(criteria);\n            let single = false;\n            \n            if (!params.all) {\n                query = query.select(selection);\n            }\n            \n            if (params.sort) {\n                query = query.sort({[params.sortKey || 'id']: params.sort});\n            }\n            \n            if (params.sorts) {\n                query = query.sort(params.sorts);\n            }\n            \n            if (params.skip) {\n                query = query.skip(params.skip);\n            }\n            \n            if (params.limit) {\n                single = params.limit === 1;\n                query = query.limit(params.limit);\n            }\n            \n            query.exec((err, data) => {\n                if (single) {\n                    data = data.length === 1 ? data[0] : null;\n                }\n                return (err) ? reject(err) : resolve(data);\n            });\n        });\n    }\n    \n    /**\n     * Create a new record.\n     *\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    create(params = {}) {\n        return new Promise((resolve, reject) => {\n            let entity = new this.entity(params);\n            return entity.save((err, data) => {\n                return (err) ? reject(err) : resolve(data);\n            });\n        });\n    }\n    \n    /**\n     * Update record.\n     *\n     * @param {Object} criteria\n     * @param {Object} update\n     * @param {Object} flags\n     * @returns {Promise}\n     */\n    update(criteria, update = {}, flags = {}) {\n        return new Promise((resolve, reject) => {\n            return this.entity.update(criteria, update, flags, (err, data) => {\n                return (err) ? reject(err) : resolve(data);\n            });\n        });\n    }\n    \n    /**\n     * Delete existing record.\n     *\n     * @param {Object} criteria\n     * @returns {Promise}\n     */\n    remove(criteria) {\n        return new Promise((resolve, reject) => {\n            return this.entity.remove(criteria, (err) => {\n                return (err) ? reject(err) : resolve();\n            });\n        });\n    }\n}"]}