{"version":3,"sources":["../../../src/models/question/index.js"],"names":["ObjectIdSchema","Schema","ObjectId","Types","QuestionSchema","id","type","String","default","index","Number","survey","question","answers","ownAnswer","text","set","transform","doc","ret","_id","__v","Question","model","QuestionModel","select","sortKey","sort","create","criteria","update","remove","surveyId","order","request","map","o","Promise","all"],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;;;;;AAEA,IAAMA,iBAAiB,mBAASC,MAAT,CAAgBC,QAAvC;AACA,IAAMA,WAAW,mBAASC,KAAT,CAAeD,QAAhC;;AAEA,IAAME,iBAAiB,IAAI,mBAASH,MAAb,CAAoB;AACvCI,QAAI,EAAEC,MAAMC,MAAR,EAAgBC,SAAS,EAAzB,EADmC;AAEvCC,WAAO,EAAEH,MAAMI,MAAR,EAAgBF,SAAS,EAAzB,EAFgC;AAGvCG,YAAQ,EAAEL,MAAOC,MAAT,EAH+B;AAIvCD,UAAM,EAAEA,MAAOC,MAAT,EAAiBC,SAAU,eAA3B,EAJiC;AAKvCI,cAAU,EAAEN,MAAOC,MAAT,EAAiBC,SAAU,EAA3B,EAL6B;AAMvCK,aAAS,EAAEP,MAAO,EAAT,EAN8B;AAOvCQ,eAAW;AACPT,YAAI,EAAEC,MAAMC,MAAR,EAAgBC,SAAS,EAAzB,EADG;AAEPO,cAAM,EAAET,MAAMC,MAAR,EAAgBC,SAAS,EAAzB;AAFC;AAP4B,CAApB,CAAvB;;AAaAJ,eAAeY,GAAf,CAAmB,QAAnB,EAA6B;AAC3BC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC7B,eAAOA,IAAIC,GAAX;AACA,eAAOD,IAAIE,GAAX;AACD;AAJ0B,CAA7B;;AAOA,IAAMC,WAAW,mBAASC,KAAT,CAAe,UAAf,EAA2BnB,cAA3B,CAAjB;;AAEA;;;;IAGqBoB,a;AACjB,6BAAc;AAAA;;AACV,aAAKD,KAAL,GAAa,oBAAUD,QAAV,CAAb;AACH;;;;+BAEMX,M,EAAQ;AACX,mBAAO,KAAKY,KAAL,CAAWE,MAAX,CAAkBd,MAAlB,EAA0B,EAACe,SAAS,OAAV,EAAmBC,MAAM,CAAzB,EAA1B,CAAP;AACH;;;+BAEMf,Q,EAAU;AACb,mBAAO,KAAKW,KAAL,CAAWK,MAAX,CAAkBhB,QAAlB,CAAP;AACH;;;+BAEMA,Q,EAAU;AACb,gBAAMiB,WAAW,EAACxB,IAAIO,SAASP,EAAd,EAAjB;AACA,mBAAOO,SAASP,EAAhB;;AAEA,gBAAMyB,SAASlB,QAAf;AACA,mBAAO,KAAKW,KAAL,CAAWO,MAAX,CAAkBD,QAAlB,EAA4BC,MAA5B,CAAP;AACH;;;+BAEMzB,E,EAAI;AACP,gBAAMwB,WAAW,EAACxB,MAAD,EAAjB;AACA,mBAAO,KAAKkB,KAAL,CAAWQ,MAAX,CAAkBF,QAAlB,CAAP;AACH;;;iCAEQG,Q,EAAU;AACf,mBAAO,KAAKT,KAAL,CAAWE,MAAX,CAAkB,EAACd,QAAQqB,QAAT,EAAlB,EAAsC,EAACN,SAAS,OAAV,EAAmBC,MAAM,CAAzB,EAAtC,EAAmE,EAAClB,OAAO,CAAR,EAAWJ,IAAI,CAAf,EAAnE,CAAP;AACH;;;oCAEW4B,K,EAAO;AAAA;;AACf,gBAAMC,UAAUD,MAAME,GAAN,CAAU;AAAA,uBAAK,MAAKZ,KAAL,CAAWO,MAAX,CAAkB,EAACzB,IAAI+B,EAAE/B,EAAP,EAAlB,EAA8B,EAACI,OAAO2B,EAAE3B,KAAV,EAA9B,CAAL;AAAA,aAAV,CAAhB;AACA,mBAAO4B,QAAQC,GAAR,CAAYJ,OAAZ,CAAP;AACH;;;;;;kBAjCgBV,a","file":"index.js","sourcesContent":["import mongoose from 'mongoose';\n\nimport Model from '../model';\n\nconst ObjectIdSchema = mongoose.Schema.ObjectId;\nconst ObjectId = mongoose.Types.ObjectId;\n\nconst QuestionSchema = new mongoose.Schema({\n    id: { type: String, default: '' },\n    index: { type: Number, default: '' },\n    survey: { type : String },\n    type: { type : String, default : 'ownAndOptions' },\n    question: { type : String, default : ''},\n    answers: { type : [] },\n    ownAnswer: {\n        id: { type: String, default: '' },\n        text: { type: String, default: '' }\n    }\n});\n\nQuestionSchema.set('toJSON', {\n  transform: function (doc, ret) {\n    delete ret._id;\n    delete ret.__v;\n  },\n});\n\nconst Question = mongoose.model('Question', QuestionSchema);\n\n/**\n * Service level class with methods for questions.\n */\nexport default class QuestionModel {\n    constructor() {\n        this.model = new Model(Question);\n    }\n\n    getAll(survey) {\n        return this.model.select(survey, {sortKey: 'index', sort: 1});\n    }\n\n    create(question) {\n        return this.model.create(question);\n    }\n\n    update(question) {\n        const criteria = {id: question.id};\n        delete question.id;\n        \n        const update = question;\n        return this.model.update(criteria, update);\n    }\n\n    remove(id) {\n        const criteria = {id};\n        return this.model.remove(criteria);\n    }\n\n    getOrder(surveyId) {\n        return this.model.select({survey: surveyId}, {sortKey: 'index', sort: 1}, {index: 1, id: 1});\n    }\n\n    updateOrder(order) {\n        const request = order.map(o => this.model.update({id: o.id}, {index: o.index}));\n        return Promise.all(request);\n    }\n}\n"]}