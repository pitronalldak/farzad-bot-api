{"version":3,"sources":["../../../src/models/user/index.js"],"names":["ObjectIdSchema","Schema","ObjectId","Types","UserSchema","date","type","String","default","username","telegramId","chatId","answers","answerId","question","questionId","answer","UserBOSchema","email","required","password","accessToken","set","transform","doc","ret","_id","__v","User","model","UserBO","UserModel","modelBO","criteria","select","limit","update"],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;;;;;AAEA,IAAMA,iBAAiB,mBAASC,MAAT,CAAgBC,QAAvC;AACA,IAAMA,WAAW,mBAASC,KAAT,CAAeD,QAAhC;;AAGA,IAAME,aAAa,IAAI,mBAASH,MAAb,CAAoB;AACnCI,UAAM,EAACC,MAAMC,MAAP,EAAeC,SAAS,EAAxB,EAD6B;AAEnCC,cAAU,EAACH,MAAMC,MAAP,EAAeC,SAAS,EAAxB,EAFyB;AAGnCE,gBAAY,EAACJ,MAAMC,MAAP,EAAeC,SAAS,EAAxB,EAHuB;AAInCG,YAAQ,EAACL,MAAMC,MAAP,EAAeC,SAAS,EAAxB,EAJ2B;AAKnCI,aAAS,CAAC;AACNC,kBAAU,EAACP,MAAMC,MAAP,EAAeC,SAAS,EAAxB,EADJ;AAENM,kBAAU,EAACR,MAAMC,MAAP,EAAeC,SAAS,EAAxB,EAFJ;AAGNO,oBAAY,EAACT,MAAMC,MAAP,EAAeC,SAAS,EAAxB,EAHN;AAINQ,gBAAQ,EAACV,MAAMC,MAAP,EAAeC,SAAS,EAAxB;AAJF,KAAD;AAL0B,CAApB,CAAnB;;AAaA,IAAMS,eAAe,IAAI,mBAAShB,MAAb,CAAoB;AACrCiB,WAAO,EAACZ,MAAMC,MAAP,EAAeY,UAAW,IAA1B,EAD8B;AAErCC,cAAU,EAACd,MAAMC,MAAP,EAAeY,UAAW,IAA1B,EAF2B;AAGrCE,iBAAa,EAACf,MAAMC,MAAP;AAHwB,CAApB,CAArB;;AAMAH,WAAWkB,GAAX,CAAe,QAAf,EAAyB;AACrBC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC3B,eAAOA,IAAIC,GAAX;AACA,eAAOD,IAAIE,GAAX;AACH;AAJoB,CAAzB;;AAOAV,aAAaK,GAAb,CAAiB,QAAjB,EAA2B;AACvBC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC3B,eAAOA,IAAIC,GAAX;AACA,eAAOD,IAAIE,GAAX;AACH;AAJsB,CAA3B;;AAOA,IAAMC,OAAO,mBAASC,KAAT,CAAe,MAAf,EAAuBzB,UAAvB,CAAb;AACA,IAAM0B,SAAS,mBAASD,KAAT,CAAe,QAAf,EAAyBZ,YAAzB,CAAf;;AAEA;;;;IAGqBc,S;AACjB,yBAAc;AAAA;;AACV,aAAKF,KAAL,GAAa,oBAAUD,IAAV,CAAb;AACA,aAAKI,OAAL,GAAe,oBAAUF,MAAV,CAAf;AACH;;;;kCAESG,Q,EAAU;AAChB,mBAAO,KAAKD,OAAL,CAAaE,MAAb,CAAoBD,QAApB,EAA8B,EAACE,OAAO,CAAR,EAA9B,CAAP;AACH;;;qCAEYF,Q,EAAUG,M,EAAQ;AAC3B,mBAAO,KAAKJ,OAAL,CAAaI,MAAb,CAAoBH,QAApB,EAA8BG,MAA9B,CAAP;AACH;;;iCAEQ;AACL,mBAAO,KAAKP,KAAL,CAAWK,MAAX,CAAkB,EAAlB,CAAP;AACH;;;;;;kBAhBgBH,S","file":"index.js","sourcesContent":["import mongoose from 'mongoose';\n\nimport Model from '../model';\n\nconst ObjectIdSchema = mongoose.Schema.ObjectId;\nconst ObjectId = mongoose.Types.ObjectId;\n\n\nconst UserSchema = new mongoose.Schema({\n    date: {type: String, default: ''},\n    username: {type: String, default: ''},\n    telegramId: {type: String, default: ''},\n    chatId: {type: String, default: ''},\n    answers: [{\n        answerId: {type: String, default: ''},\n        question: {type: String, default: ''},\n        questionId: {type: String, default: ''},\n        answer: {type: String, default: ''}\n    }]\n});\n\nconst UserBOSchema = new mongoose.Schema({\n    email: {type: String, required : true},\n    password: {type: String, required : true},\n    accessToken: {type: String},\n});\n\nUserSchema.set('toJSON', {\n    transform: function (doc, ret) {\n        delete ret._id;\n        delete ret.__v;\n    },\n});\n\nUserBOSchema.set('toJSON', {\n    transform: function (doc, ret) {\n        delete ret._id;\n        delete ret.__v;\n    },\n});\n\nconst User = mongoose.model('User', UserSchema);\nconst UserBO = mongoose.model('UserBO', UserBOSchema);\n\n/**\n * Service level class with methods for user.\n */\nexport default class UserModel {\n    constructor() {\n        this.model = new Model(User);\n        this.modelBO = new Model(UserBO);\n    }\n    \n    getUserBO(criteria) {\n        return this.modelBO.select(criteria, {limit: 1});\n    }\n    \n    updateUserBO(criteria, update) {\n        return this.modelBO.update(criteria, update);\n    }\n    \n    getAll() {\n        return this.model.select({});\n    }\n}\n\n"]}