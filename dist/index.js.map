{"version":3,"sources":["../src/index.js"],"names":["port","process","env","PORT","app","server","createServer","corsOptions","origin","optionsSuccessStatus","methods","allowedHeaders","credentials","use","json","limit","bodyLimit","errorFormatter","param","msg","value","namespace","split","root","shift","formParam","length","connect","on","console","log","once","listen","options","socketOptions","keepAlive","connection","get","register"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEA,IAAIC,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAEA,IAAMG,cAAc;AAChBC,YAAQ,CAAC,uBAAD,EAA0B,wCAA1B,CADQ;AAEhBC,0BAAsB,GAFN;AAGhBC,aAAS,qBAHO;AAIhBC,oBAAgB,CAAC,cAAD,EAAiB,eAAjB,CAJA;AAKhBC,iBAAa;AALG,CAApB;;AASAR,IAAIS,GAAJ,CAAQ,qBAAWC,IAAX,CAAgB;AACvBC,WAAQ,iBAAOC;AADQ,CAAhB,CAAR;AAGAZ,IAAIS,GAAJ,CAAQ,6BAAR;;AAEAT,IAAIS,GAAJ,CAAQ,oBAAKN,WAAL,CAAR;;AAEAH,IAAIS,GAAJ,CAAQ,gCAAiB;AACrBI,oBAAgB,wBAACC,KAAD,EAAQC,GAAR,EAAaC,KAAb,EAAuB;AACnC,YAAMC,YAAYH,MAAMI,KAAN,CAAY,GAAZ,CAAlB;AACA,YAAMC,OAAUF,UAAUG,KAAV,EAAhB;AACA,YAAIC,YAAYF,IAAhB;;AAEA,eAAMF,UAAUK,MAAhB,EAAwB;AACpBD,yBAAa,MAAMJ,UAAUG,KAAV,EAAN,GAA0B,GAAvC;AACH;AACD,eAAO;AACHN,mBAAQO,SADL;AAEHN,iBAAQA,GAFL;AAGHC,mBAAQA;AAHL,SAAP;AAKH;AAdoB,CAAjB,CAAR;;AAiBAO,UACGC,EADH,CACM,OADN,EACeC,QAAQC,GADvB,EAEGF,EAFH,CAEM,cAFN,EAEsBD,OAFtB,EAGGI,IAHH,CAGQ,MAHR,EAGgBC,MAHhB;;AAKA,SAASL,OAAT,GAAoB;AAClB,QAAMM,UAAU,EAAE5B,QAAQ,EAAE6B,eAAe,EAAEC,WAAW,CAAb,EAAjB,EAAV,EAAhB;AACA,WAAO,mBAASR,OAAT,CAAiB,gEAAjB,EAAmFS,UAA1F;AACA;AACD;;AAED,SAASJ,MAAT,GAAmB;AACjB,QAAI5B,IAAIiC,GAAJ,CAAQ,KAAR,MAAmB,MAAvB,EAA+B;AAC/BjC,QAAI4B,MAAJ,CAAWhC,IAAX;AACA6B,YAAQC,GAAR,CAAY,iCAAiC9B,IAA7C;AACD;;AAED,qBAAcI,GAAd,EAAmB,sBAAnB,EAAwCkC,QAAxC;AACA,uBAAgBlC,GAAhB,EAAqB,wBAArB,EAA4CkC,QAA5C;AACA,mBAAYlC,GAAZ,EAAiB,oBAAjB,EAAoCkC,QAApC;;kBAEelC,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\n\nimport expressValidator from 'express-validator';\n\nimport config from './config.json';\n\nimport SurveyApi from './rest-api/survey';\nimport QuestionApi from './rest-api/question';\nimport UserApi from './rest-api/user';\n\nimport SurveyService from './services/survey';\nimport QuestionService from './services/question';\nimport UserService from './services/user';\n\nconst port = process.env.PORT || 5000;\n\nlet app = express();\napp.server = http.createServer(app);\n\nconst corsOptions = {\n    origin: ['http://localhost:3000', 'https://survey-dashboard.herokuapp.com'],\n    optionsSuccessStatus: 200,\n    methods: 'GET,POST,PUT,DELETE',\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    credentials: true\n};\n\n\napp.use(bodyParser.json({\n\tlimit : config.bodyLimit\n}));\napp.use(cookieParser());\n\napp.use(cors(corsOptions));\n\napp.use(expressValidator({\n    errorFormatter: (param, msg, value) => {\n        const namespace = param.split('.');\n        const root    = namespace.shift();\n        let formParam = root;\n\n        while(namespace.length) {\n            formParam += '[' + namespace.shift() + ']';\n        }\n        return {\n            param : formParam,\n            msg   : msg,\n            value : value\n        };\n    }\n}));\n\nconnect()\n  .on('error', console.log)\n  .on('disconnected', connect)\n  .once('open', listen);\n\nfunction connect () {\n  const options = { server: { socketOptions: { keepAlive: 1 } } };\n  return mongoose.connect('mongodb://bot:Matwey12@ds145019.mlab.com:45019/heroku_zlrrx207').connection;\n  // return mongoose.connect('mongodb://bot:bot@127.0.0.1:27017/bot').connection;\n}\n\nfunction listen () {\n  if (app.get('env') === 'test') return;\n  app.listen(port);\n  console.log('Express app started on port ' + port);\n}\n\nnew SurveyApi(app, new SurveyService()).register();\nnew QuestionApi(app, new QuestionService()).register();\nnew UserApi(app, new UserService()).register();\n\nexport default app;\n"]}