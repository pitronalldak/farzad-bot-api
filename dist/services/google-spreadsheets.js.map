{"version":3,"sources":["../../src/services/google-spreadsheets.js"],"names":["fs","require","readline","google","googleAuth","moment","spreadsheet","SCOPES","TOKEN_DIR","process","env","HOME","HOMEPATH","USERPROFILE","TOKEN_PATH","exports","postSpreadSheets","questions","users","surveys","content","installed","client_id","project_id","token_uri","auth_provider_x509_cert_url","client_secret","redirect_uris","authorize","listMajors","credentials","callback","clientSecret","clientId","redirectUrl","auth","oauth2Client","OAuth2","readFile","err","token","getNewToken","JSON","parse","authUrl","generateAuthUrl","access_type","scope","console","log","rl","createInterface","input","stdin","output","stdout","question","code","close","getToken","storeToken","mkdirSync","writeFile","stringify","toLetters","num","mod","pow","out","String","fromCharCode","writeDataToSheets","sheets","survey","userList","columns","userQuantity","questionQuantity","user","id","juser","push","userEnteredValue","stringValue","telegramId","date","username","answers","answer","answ","answerId","values","sort","a","b","diff","q","spreadsheets","get","spreadsheetId","includeGridData","receivedSpreadsheet","sheetId","find","sheet","properties","title","name","forEach","batchUpdate","resource","requests","updateCells","fields","start","rowIndex","columnIndex","rows","response","some","addSheet"],"mappings":"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","file":"google-spreadsheets.js","sourcesContent":["const fs = require('fs');\nconst readline = require('readline');\nconst google = require('googleapis');\nconst googleAuth = require('google-auth-library');\nconst moment = require('moment');\n// test: 15xQEWvKK88W4eALxThmtHIzsdPXFqfYHir8QvjH8Jq0\n// origin: 1LOUGqVKIm-crpOjIgTPUY7QlY6ubaSyclRZjqsGUx2U\n// dev: 1TAidjIed5goBfdtIk81L955tSx-zyChioCHT2VzkdBg\n// v2 dev: 1-ZFmyF-Iz7wyzdMLGEI9IjBbxL9l_FSFG8ogqWLVJc8\nconst spreadsheet = '1TAidjIed5goBfdtIk81L955tSx-zyChioCHT2VzkdBg';\n\n// If modifying these scopes, delete your previously saved credentials\n// at ~/.credentials/sheets.googleapis.com-nodejs-quickstart.json\nconst SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];\nconst TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\n    process.env.USERPROFILE) + '/.credentials/';\nconst TOKEN_PATH = TOKEN_DIR + 'sheets.googleapis.com-nodejs-quickstart.json';\n\n// Load client secrets from a local file.\n\nexports.postSpreadSheets = (questions, users, surveys) => {\n    const content = {\n        installed: {\n            client_id:\"554247570808-07ll9564csph8445unhj7fte8robleun.apps.googleusercontent.com\",\n            project_id:\"linen-marking-160519\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\n            token_uri:\"https://accounts.google.com/o/oauth2/token\",\n            auth_provider_x509_cert_url:\"https://www.googleapis.com/oauth2/v1/certs\",\n            client_secret:\"SOj3OpyBghrWB1Ds-j3UCIan\",\n            redirect_uris:[\"urn:ietf:wg:oauth:2.0:oob\",\"http://localhost\"]}\n        };\n    \n    \n    // Authorize a client with the loaded credentials, then call the\n    // Google Sheets API.\n    authorize(content, listMajors(questions, users, surveys));\n};\n\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n *\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\nfunction authorize(credentials, callback) {\n    const clientSecret = credentials.installed.client_secret;\n    const clientId = credentials.installed.client_id;\n    const redirectUrl = credentials.installed.redirect_uris[0];\n    const auth = new googleAuth();\n    const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);\n    \n    // Check if we have previously stored a token.\n    fs.readFile(TOKEN_PATH, function (err, token) {\n        if (err) {\n            getNewToken(oauth2Client, callback);\n        } else {\n            oauth2Client.credentials = JSON.parse(token);\n            callback(oauth2Client);\n        }\n    });\n}\n\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n *\n * @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback to call with the authorized\n *     client.\n */\nfunction getNewToken(oauth2Client, callback) {\n    const authUrl = oauth2Client.generateAuthUrl({\n        access_type: 'offline',\n        scope: SCOPES\n    });\n    console.log('Authorize this app by visiting this url: ', authUrl);\n    const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n    });\n    rl.question('Enter the code from that page here: ', function (code) {\n        rl.close();\n        oauth2Client.getToken(code, function (err, token) {\n            if (err) {\n                console.log('Error while trying to retrieve access token', err);\n                return;\n            }\n            oauth2Client.credentials = token;\n            storeToken(token);\n            callback(oauth2Client);\n        });\n    });\n}\n\n/**\n * Store token to disk be used in later program executions.\n *\n * @param {Object} token The token to store to disk.\n */\nfunction storeToken(token) {\n    try {\n        fs.mkdirSync(TOKEN_DIR);\n    } catch (err) {\n        if (err.code != 'EEXIST') {\n            throw err;\n        }\n    }\n    fs.writeFile(TOKEN_PATH, JSON.stringify(token));\n    console.log('Token stored to ' + TOKEN_PATH);\n}\n\n/**\n * Helper mapping count to letter\n * It's one-based, so 1 is A, 26 is Z, 27 is AA.\n */\nfunction toLetters(num) {\n    \"use strict\";\n    var mod = num % 26,\n        pow = num / 26 | 0,\n        out = mod ? String.fromCharCode(64 + mod) : (--pow, 'Z');\n    return pow ? toLetters(pow) + out : out;\n}\n\n/**\n * Print the data in a spreadsheet:\n */\nfunction writeDataToSheets(auth, sheets, users, questions, survey) {\n    let userList = [];\n    let columns = [];\n    let userQuantity = 0;\n    let questionQuantity = 0;\n    for (let user of users) {\n        if (user.survey === survey.id) {\n            userQuantity++;\n            let juser = [];\n            juser.push({\n                userEnteredValue: {\n                    stringValue: user.telegramId,\n                }\n            });\n            juser.push({\n                userEnteredValue: {\n                    stringValue: user.date,\n                }\n            });\n            juser.push({\n                userEnteredValue: {\n                    stringValue: user.username,\n                }\n            });\n            for (let answer of user.answers) {\n                let answ = '';\n                if (answer.answerId) {\n                    answ = answer.answerId\n                } else {\n                    answ = answer.answer\n                }\n                juser.push({\n                    userEnteredValue: {\n                        stringValue: answ,\n                    }\n                });\n            }\n            userList.push({\n                values: juser\n            });\n        }\n    }\n    userList.sort(function (a, b) {\n        if (moment().diff(a.values[1].userEnteredValue.stringValue) > moment().diff(b.values[1].userEnteredValue.stringValue)) {\n            return -1;\n        }\n        if (moment().diff(a.values[1].userEnteredValue.stringValue) < moment().diff(b.values[1].userEnteredValue.stringValue)) {\n            return 1;\n        }\n    });\n    columns.push({\n            userEnteredValue: {\n                stringValue: 'telegramId',\n            }\n        },\n        {\n            userEnteredValue: {\n                stringValue: 'date',\n            }\n        },\n        {\n            userEnteredValue: {\n                stringValue: 'Username',\n            }\n        });\n    for (let q of questions) {\n        if (q.survey === survey.id) {\n            questionQuantity++;\n            columns.push({\n                userEnteredValue: {\n                    stringValue: q.question,\n                }\n            });\n        }\n    }\n    columns.push({\n            userEnteredValue: {\n                stringValue: 'total number of questions - ' + questionQuantity,\n            }\n        },\n        {\n            userEnteredValue: {\n                stringValue: 'total number of users - ' + userQuantity,\n            }\n        });\n    sheets.spreadsheets.get({\n        spreadsheetId: spreadsheet,\n        includeGridData: true,\n        auth: auth,\n    }, function (err, receivedSpreadsheet) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        let sheetId = receivedSpreadsheet.sheets.find(sheet => sheet.properties.title === survey.name).properties.sheetId;\n        let values = [{\n            values: columns,\n        }];\n        userList.forEach(user => values.push(user));\n        sheets.spreadsheets.batchUpdate({\n            spreadsheetId: spreadsheet,\n            resource: {\n                requests: [{\n                    updateCells: {\n                        fields: '*',\n                        start: {\n                            sheetId: sheetId,\n                            rowIndex: 0,\n                            columnIndex: 0,\n                        },\n                        rows: values,\n                    }\n                }],\n            },\n            auth: auth,\n        }, function (err, response) {\n            if (err) {\n                console.log('The API returned an error: ' + err);\n                return;\n            }\n            console.log(response);\n        });\n    });\n}\n\nconst listMajors = (questions, users, surveys) => (\n    (auth) => {\n        const sheets = google.sheets('v4');\n        sheets.spreadsheets.get({\n            spreadsheetId: spreadsheet,\n            includeGridData: true,\n            auth: auth,\n        }, function (err, receivedSpreadsheet) {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            surveys.forEach(survey => {\n                if (!receivedSpreadsheet.sheets.some(sheet => sheet.properties.title === survey.name)) {\n                    sheets.spreadsheets.batchUpdate({\n                        spreadsheetId: spreadsheet,\n                        resource: {\n                            requests: [{\n                                addSheet: {\n                                    properties: {\n                                        title: survey.name,\n                                    },\n                                }\n                            }],\n                        },\n                        auth: auth,\n                    }, function (err, response) {\n                        if (err) {\n                            console.log(err);\n                            return;\n                        }\n                        writeDataToSheets(auth, sheets, users, questions, survey);\n                    })\n                } else {\n                    writeDataToSheets(auth, sheets, users, questions, survey);\n                }\n            });\n        });\n    }\n);"]}