{"version":3,"sources":["../../../src/services/question/index.js"],"names":["uuidV4","require","QuestionService","model","req","res","getAll","body","then","json","data","catch","status","send","JSON","stringify","err","error","message","id","create","update","msg","remove","getOrder","surveyId","updateOrder"],"mappings":"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","file":"index.js","sourcesContent":["import Service from '../service';\nimport QuestionModel from '../../models/question';\nconst uuidV4 = require('uuid/v4');\n\n/**\n * Service level class with methods for questions.\n */\nexport default class QuestionService extends Service {\n    constructor() {\n        super();\n        this.model = new QuestionModel();\n    }\n    \n    /**\n     * Method for request all questions.\n     *\n     * @param {String} req request from client\n     * @param {String} res response to client\n     * @return {Promise} promise\n     */\n    getAll(req, res) {\n        \n        return (\n            this.model.getAll(req.body)\n                .then(data => {\n                    res.json({data});\n                })\n                .catch(error => {\n                    res.status(400).send(JSON.stringify({err: error.message || error}));\n                }))\n    };\n    \n    /**\n     * Method for create question .\n     *\n     * @param {String} req request from client\n     * @param {String} res response to client\n     * @return {Promise} promise\n     */\n    create(req, res) {\n    \n        const id = uuidV4();\n        req.body.id = id;\n        return (\n            this.model.create(req.body)\n                .then(() => {\n                    res.json({id});\n                })\n                .catch(error => {\n                    res.status(400).send(JSON.stringify({err: error.message || error}));\n                }))\n    };\n    \n    /**\n     * Method for update question .\n     *\n     * @param {String} req request from client\n     * @param {String} res response to client\n     * @return {Promise} promise\n     */\n    update(req, res) {\n        // req.assert('password', 'required').notEmpty();\n        // req.assert('password', '6 to 20 characters required').len(6, 20);\n        // req.assert('email', 'valid email required').isEmail();\n        // req.assert('email', 'required').notEmpty();\n        // this.validation(req);\n        \n        \n        return (\n            this.model.update(req.body)\n                .then(() => {\n                    res.status(200).send(JSON.stringify({msg: \"Question updated\"}));\n                })\n                .catch(error => {\n                    res.status(400).send(JSON.stringify({err: error.message || error}));\n                }))\n    };\n    \n    /**\n     * Method for delete question .\n     *\n     * @param {String} req request from client\n     * @param {String} res response to client\n     * @return {Promise} promise\n     */\n    remove(req, res) {\n        // req.assert('password', 'required').notEmpty();\n        // req.assert('password', '6 to 20 characters required').len(6, 20);\n        // req.assert('email', 'valid email required').isEmail();\n        // req.assert('email', 'required').notEmpty();\n        // this.validation(req);\n        \n        \n        return (\n            this.model.remove(req.body.id)\n                .then(() => {\n                    res.status(200).send(JSON.stringify({msg: \"Question deleted\"}));\n                })\n                .catch(error => {\n                    res.status(400).send(JSON.stringify({err: error.message || error}));\n                }))\n    };\n    \n    /**\n     * Method for request questions order.\n     *\n     * @param {String} req request from client\n     * @param {String} res response to client\n     * @return {Promise} promise\n     */\n    getOrder(req, res) {\n        \n        return (\n            this.model.getOrder(req.body.surveyId)\n                .then(data => {\n                    res.json({data});\n                })\n                .catch(error => {\n                    res.status(400).send(JSON.stringify({err: error.message || error}));\n                }))\n    };\n    \n    /**\n     * Method for request questions order.\n     *\n     * @param {String} req request from client\n     * @param {String} res response to client\n     * @return {Promise} promise\n     */\n    updateOrder(req, res) {\n        \n        return (\n            this.model.updateOrder(req.body)\n                .then(() => {\n                    res.status(200).send(JSON.stringify({msg: \"Order updated\"}));\n                })\n                .catch(error => {\n                    res.status(400).send(JSON.stringify({err: error.message || error}));\n                }))\n    };\n}"]}